// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: milestone.proto

package milestonepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MilestoneRuleService_CreateMilestoneRule_FullMethodName             = "/invoicepb.MilestoneRuleService/CreateMilestoneRule"
	MilestoneRuleService_UpdateMilestoneRule_FullMethodName             = "/invoicepb.MilestoneRuleService/UpdateMilestoneRule"
	MilestoneRuleService_GetMilestonesByProjectID_FullMethodName        = "/invoicepb.MilestoneRuleService/GetMilestonesByProjectID"
	MilestoneRuleService_GetMilestoneByProjectIDAndPhase_FullMethodName = "/invoicepb.MilestoneRuleService/GetMilestoneByProjectIDAndPhase"
)

// MilestoneRuleServiceClient is the client API for MilestoneRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilestoneRuleServiceClient interface {
	CreateMilestoneRule(ctx context.Context, in *CreateMilestoneRuleRequest, opts ...grpc.CallOption) (*MilestoneRule, error)
	UpdateMilestoneRule(ctx context.Context, in *UpdateMilestoneRuleRequest, opts ...grpc.CallOption) (*MilestoneRule, error)
	GetMilestonesByProjectID(ctx context.Context, in *GetMilestonesByProjectIDRequest, opts ...grpc.CallOption) (*GetMilestonesByProjectIDResponse, error)
	GetMilestoneByProjectIDAndPhase(ctx context.Context, in *GetMilestoneByProjectIDAndPhaseRequest, opts ...grpc.CallOption) (*GetMilestoneByProjectIDAndPhaseResponse, error)
}

type milestoneRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilestoneRuleServiceClient(cc grpc.ClientConnInterface) MilestoneRuleServiceClient {
	return &milestoneRuleServiceClient{cc}
}

func (c *milestoneRuleServiceClient) CreateMilestoneRule(ctx context.Context, in *CreateMilestoneRuleRequest, opts ...grpc.CallOption) (*MilestoneRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MilestoneRule)
	err := c.cc.Invoke(ctx, MilestoneRuleService_CreateMilestoneRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneRuleServiceClient) UpdateMilestoneRule(ctx context.Context, in *UpdateMilestoneRuleRequest, opts ...grpc.CallOption) (*MilestoneRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MilestoneRule)
	err := c.cc.Invoke(ctx, MilestoneRuleService_UpdateMilestoneRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneRuleServiceClient) GetMilestonesByProjectID(ctx context.Context, in *GetMilestonesByProjectIDRequest, opts ...grpc.CallOption) (*GetMilestonesByProjectIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMilestonesByProjectIDResponse)
	err := c.cc.Invoke(ctx, MilestoneRuleService_GetMilestonesByProjectID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneRuleServiceClient) GetMilestoneByProjectIDAndPhase(ctx context.Context, in *GetMilestoneByProjectIDAndPhaseRequest, opts ...grpc.CallOption) (*GetMilestoneByProjectIDAndPhaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMilestoneByProjectIDAndPhaseResponse)
	err := c.cc.Invoke(ctx, MilestoneRuleService_GetMilestoneByProjectIDAndPhase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilestoneRuleServiceServer is the server API for MilestoneRuleService service.
// All implementations must embed UnimplementedMilestoneRuleServiceServer
// for forward compatibility.
type MilestoneRuleServiceServer interface {
	CreateMilestoneRule(context.Context, *CreateMilestoneRuleRequest) (*MilestoneRule, error)
	UpdateMilestoneRule(context.Context, *UpdateMilestoneRuleRequest) (*MilestoneRule, error)
	GetMilestonesByProjectID(context.Context, *GetMilestonesByProjectIDRequest) (*GetMilestonesByProjectIDResponse, error)
	GetMilestoneByProjectIDAndPhase(context.Context, *GetMilestoneByProjectIDAndPhaseRequest) (*GetMilestoneByProjectIDAndPhaseResponse, error)
	mustEmbedUnimplementedMilestoneRuleServiceServer()
}

// UnimplementedMilestoneRuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMilestoneRuleServiceServer struct{}

func (UnimplementedMilestoneRuleServiceServer) CreateMilestoneRule(context.Context, *CreateMilestoneRuleRequest) (*MilestoneRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMilestoneRule not implemented")
}
func (UnimplementedMilestoneRuleServiceServer) UpdateMilestoneRule(context.Context, *UpdateMilestoneRuleRequest) (*MilestoneRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestoneRule not implemented")
}
func (UnimplementedMilestoneRuleServiceServer) GetMilestonesByProjectID(context.Context, *GetMilestonesByProjectIDRequest) (*GetMilestonesByProjectIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestonesByProjectID not implemented")
}
func (UnimplementedMilestoneRuleServiceServer) GetMilestoneByProjectIDAndPhase(context.Context, *GetMilestoneByProjectIDAndPhaseRequest) (*GetMilestoneByProjectIDAndPhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestoneByProjectIDAndPhase not implemented")
}
func (UnimplementedMilestoneRuleServiceServer) mustEmbedUnimplementedMilestoneRuleServiceServer() {}
func (UnimplementedMilestoneRuleServiceServer) testEmbeddedByValue()                              {}

// UnsafeMilestoneRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilestoneRuleServiceServer will
// result in compilation errors.
type UnsafeMilestoneRuleServiceServer interface {
	mustEmbedUnimplementedMilestoneRuleServiceServer()
}

func RegisterMilestoneRuleServiceServer(s grpc.ServiceRegistrar, srv MilestoneRuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedMilestoneRuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MilestoneRuleService_ServiceDesc, srv)
}

func _MilestoneRuleService_CreateMilestoneRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMilestoneRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneRuleServiceServer).CreateMilestoneRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneRuleService_CreateMilestoneRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneRuleServiceServer).CreateMilestoneRule(ctx, req.(*CreateMilestoneRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneRuleService_UpdateMilestoneRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMilestoneRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneRuleServiceServer).UpdateMilestoneRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneRuleService_UpdateMilestoneRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneRuleServiceServer).UpdateMilestoneRule(ctx, req.(*UpdateMilestoneRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneRuleService_GetMilestonesByProjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestonesByProjectIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneRuleServiceServer).GetMilestonesByProjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneRuleService_GetMilestonesByProjectID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneRuleServiceServer).GetMilestonesByProjectID(ctx, req.(*GetMilestonesByProjectIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneRuleService_GetMilestoneByProjectIDAndPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestoneByProjectIDAndPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneRuleServiceServer).GetMilestoneByProjectIDAndPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneRuleService_GetMilestoneByProjectIDAndPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneRuleServiceServer).GetMilestoneByProjectIDAndPhase(ctx, req.(*GetMilestoneByProjectIDAndPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilestoneRuleService_ServiceDesc is the grpc.ServiceDesc for MilestoneRuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilestoneRuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoicepb.MilestoneRuleService",
	HandlerType: (*MilestoneRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMilestoneRule",
			Handler:    _MilestoneRuleService_CreateMilestoneRule_Handler,
		},
		{
			MethodName: "UpdateMilestoneRule",
			Handler:    _MilestoneRuleService_UpdateMilestoneRule_Handler,
		},
		{
			MethodName: "GetMilestonesByProjectID",
			Handler:    _MilestoneRuleService_GetMilestonesByProjectID_Handler,
		},
		{
			MethodName: "GetMilestoneByProjectIDAndPhase",
			Handler:    _MilestoneRuleService_GetMilestoneByProjectIDAndPhase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milestone.proto",
}
